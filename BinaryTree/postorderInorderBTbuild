// Link : https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

// Approach: Recursion + Map [TC: O(N) / SC: O(N)]

class Solution {
public:
    TreeNode* construct(vector<int> postorder, int postStart, int postEnd, 
                        vector<int> inorder, int inStart, int inEnd, map<int,int> &inMap)
    {
        // Base case: if either the postorder or inorder traversal is empty, return NULL
        if(postStart > postEnd || inStart > inEnd) return NULL;
        
        // Create a new node for the root of the current subtree using the last element in the postorder traversal
        TreeNode* root = new TreeNode(postorder[postEnd]);

        // Find the index of the root value in the inorder traversal using the inMap map
        int inRoot = inMap[root->val];

        // Calculate the number of nodes in the left subtree (i.e., the number of nodes to the left of the root in the inorder traversal)
        int numLeft = inRoot - inStart;

        // Recursively construct the left subtree using the appropriate portions of the postorder and inorder traversal arrays
        root->left = construct(postorder, postStart, postStart+numLeft-1, inorder, inStart, inRoot-1, inMap);

        // Recursively construct the right subtree using the appropriate portions of the postorder and inorder traversal arrays
        root->right = construct(postorder, postStart+numLeft, postEnd-1, inorder, inRoot+1, inEnd, inMap);

        // Return the root node of the current subtree
        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder){
        // create map of values to indices in inorder traversal
        map<int,int> inMap;

        for(int i=0; i<inorder.size(); i++){
            inMap[inorder[i]] = i;
        }

        // Recursively construct the tree using the construct function and the entire postorder and inorder traversal arrays
        TreeNode* root = construct(postorder, 0, postorder.size()-1, inorder, 0, inorder.size()-1, inMap);

        return root;
    }
};